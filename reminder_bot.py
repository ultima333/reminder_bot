import logging
import os
import psycopg2
from psycopg2 import pool
from datetime import time, datetime
from flask import Flask, request
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters
)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Flask –¥–æ–¥–∞—Ç–∫—É
app = Flask(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è Application
application = None

# –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ PostgreSQL
DATABASE_URL = os.environ.get('DATABASE_URL')

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ DATABASE_URL —Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—É–ª—É –ø—ñ–¥–∫–ª—é—á–µ–Ω—å
if not DATABASE_URL:
    logger.error("‚ùå DATABASE_URL –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞.")
    exit(1)

try:
    db_pool = psycopg2.pool.SimpleConnectionPool(1, 10, dsn=DATABASE_URL)
except Exception as e:
    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ PostgreSQL: {e}")
    exit(1)

def get_connection():
    return db_pool.getconn()

def release_connection(conn):
    db_pool.putconn(conn)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
def initialize_database():
    conn = get_connection()
    cursor = conn.cursor()
    try:
        # –¢–∞–±–ª–∏—Ü—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id BIGINT PRIMARY KEY,
                username TEXT,
                chat_id BIGINT UNIQUE
            )
        ''')

        # –¢–∞–±–ª–∏—Ü—è –¥–ª—è –∑–∞–≤–¥–∞–Ω—å
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS tasks (
                id SERIAL PRIMARY KEY,
                user_id BIGINT,
                task_text TEXT,
                priority TEXT,
                assigned_by TEXT,
                created_at TIMESTAMP,
                last_reminder_sent TIMESTAMP,
                FOREIGN KEY(user_id) REFERENCES users(user_id)
            )
        ''')
        conn.commit()
    finally:
        cursor.close()
        release_connection(conn)

# –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
def add_user_to_db(user_id, username, chat_id):
    conn = get_connection()
    cursor = conn.cursor()
    try:
        cursor.execute('INSERT INTO users (user_id, username, chat_id) VALUES (%s, %s, %s) ON CONFLICT (chat_id) DO NOTHING', (user_id, username, chat_id))
        conn.commit()
    finally:
        cursor.close()
        release_connection(conn)

# –î–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
def add_task_to_db(user_id, task_text, priority, assigned_by):
    conn = get_connection()
    cursor = conn.cursor()
    try:
        created_at = datetime.now()
        cursor.execute('''
            INSERT INTO tasks (user_id, task_text, priority, assigned_by, created_at, last_reminder_sent)
            VALUES (%s, %s, %s, %s, %s, %s)
        ''', (user_id, task_text, priority, assigned_by, created_at, None))
        conn.commit()
    finally:
        cursor.close()
        release_connection(conn)

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
def get_user_tasks_from_db(user_id):
    conn = get_connection()
    cursor = conn.cursor()
    try:
        cursor.execute('SELECT id, task_text, priority, assigned_by FROM tasks WHERE user_id = %s', (user_id,))
        tasks = cursor.fetchall()
        return tasks
    finally:
        cursor.close()
        release_connection(conn)

# –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è
def delete_task_from_db(task_id):
    conn = get_connection()
    cursor = conn.cursor()
    try:
        cursor.execute('DELETE FROM tasks WHERE id = %s', (task_id,))
        conn.commit()
    finally:
        cursor.close()
        release_connection(conn)

# –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
def restore_reminders(application):
    conn = get_connection()
    cursor = conn.cursor()
    try:
        cursor.execute('SELECT id, user_id, task_text, priority, created_at, last_reminder_sent FROM tasks')
        tasks_list = cursor.fetchall()

        if not tasks_list:
            logger.info("üîπ –ù–µ–º–∞—î –∑–∞–≤–¥–∞–Ω—å –¥–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å.")
            return

        for task in tasks_list:
            task_id, user_id, task_text, priority, created_at, last_reminder_sent = task
            now = datetime.now()

            if priority == 'urgent':
                interval = 3600  # –ö–æ–∂–Ω—ñ 1 –≥–æ–¥–∏–Ω—É
            elif priority == 'medium':
                interval = 21600  # –ö–æ–∂–Ω—ñ 6 –≥–æ–¥–∏–Ω
            elif priority == 'low':
                reminder_time = time(7, 0, 0)  # –©–æ–¥–Ω—è –æ 7:00
                application.job_queue.run_daily(remind_task, time=reminder_time, chat_id=user_id, data=user_id, name='low')
                continue

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –Ω–∞—Å—Ç–∞–≤ —á–∞—Å –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
            if last_reminder_sent and (now - last_reminder_sent).total_seconds() < interval:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ, —è–∫—â–æ —â–µ –Ω–µ –Ω–∞—Å—Ç–∞–≤ —á–∞—Å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è

            application.job_queue.run_repeating(
                remind_task,
                interval=interval,
                first=0,
                chat_id=user_id,
                data=user_id,
                name=priority
            )
    finally:
        cursor.close()
        release_connection(conn)

# –°—Ç–∞–Ω–∏ –±–æ—Ç–∞
STATE_SELECT_USER = 1
STATE_ENTER_TASK = 2
STATE_SELECT_PRIORITY = 3
STATE_CANNOT_COMPLETE = 4

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—ñ–≤
priority_translation = {
    'urgent': '–¢–µ—Ä–º—ñ–Ω–æ–≤–æ',
    'medium': '–°–µ—Ä–µ–¥–Ω—ñ–π',
    'low': '–ù–∏–∑—å–∫–∏–π'
}

# –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
def main_menu_keyboard():
    return ReplyKeyboardMarkup([
        ['üìù –î–æ–¥–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è', '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è'],
        ['üìã –ú–æ—ó –∑–∞–≤–¥–∞–Ω–Ω—è', 'üö´ –ù–µ –º–æ–∂—É –≤–∏–∫–æ–Ω–∞—Ç–∏']
    ], resize_keyboard=True)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat.type != "private":
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –º–µ–Ω—ñ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —â–æ–± –¥–æ–¥–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è.")
        return

    user = update.effective_user

    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö, —è–∫—â–æ –π–æ–≥–æ —Ç–∞–º –Ω–µ–º–∞—î
    add_user_to_db(user.id, user.username if user.username else f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user.id}", user.id)

    await update.message.reply_text(
        "–í—ñ—Ç–∞—é! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
        reply_markup=main_menu_keyboard()
    )

# –§—É–Ω–∫—Ü—ñ—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
async def remind_task(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    assigned_user = job.data
    priority = job.name
    now = datetime.now().time()
    start_time = time(7, 0, 0)
    end_time = time(19, 59, 59)

    if start_time <= now <= end_time:
        conn = get_connection()
        cursor = conn.cursor()
        try:
            cursor.execute('SELECT task_text, priority, assigned_by FROM tasks WHERE user_id = %s AND priority = %s', (assigned_user, priority))
            tasks_list = cursor.fetchall()

            for task in tasks_list:
                task_text, _, assigned_by = task
                priority_text = priority_translation.get(priority, "–ù–µ–≤—ñ–¥–æ–º–∏–π")  # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
                await context.bot.send_message(
                    chat_id=assigned_user,
                    text=f"‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –¥–ª—è {assigned_by}:\n\n"
                         f"üìù –ó–∞–≤–¥–∞–Ω–Ω—è: {task_text}\n"
                         f"üö¶ –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: {priority_text}"
                )

                # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —á–∞—Å—É –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
                cursor.execute('UPDATE tasks SET last_reminder_sent = %s WHERE user_id = %s AND priority = %s', (datetime.now(), assigned_user, priority))
                conn.commit()
        finally:
            cursor.close()
            release_connection(conn)
    else:
        logger.info(f"–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ, –±–æ –∑–∞—Ä–∞–∑ –ø–æ–∑–∞ —Ä–æ–±–æ—á–∏–º —á–∞—Å–æ–º: {now}")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
def initialize_bot():
    global application
    TOKEN = "8197063148:AAHu3grk5UOnUqqjuTBmqAPvy-7TYfId4qk"
    application = (
        ApplicationBuilder()
        .token(TOKEN)
        .read_timeout(30)
        .write_timeout(30)
        .post_init(lambda app: app.job_queue.start())
        .build()
    )

    # –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
    restore_reminders(application)

    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(button))

    # –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫
    application.add_error_handler(error_handler)

    # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞
    application.run_webhook(
        listen='0.0.0.0',
        port=int(os.environ.get('PORT', 5000)),
        url_path=TOKEN,
        webhook_url=f'https://reminder-bot-m6pm.onrender.com/{TOKEN}'
    )

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —Ç–∞ –±–æ—Ç–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –¥–æ–¥–∞—Ç–∫—É
initialize_database()
initialize_bot()

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 5000)))