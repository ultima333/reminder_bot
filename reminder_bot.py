import logging
import os
import json
from datetime import time, datetime
from flask import Flask, request
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters
)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Flask –¥–æ–¥–∞—Ç–∫—É
app = Flask(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è Application
application = None

# –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
DATA_FILE = "tasks_data.json"

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ —Ñ–∞–π–ª—É
def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, 'r', encoding='utf-8') as file:
            return json.load(file)
    return {"tasks": {}, "user_data": {}}

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —É —Ñ–∞–π–ª
def save_data(data):
    with open(DATA_FILE, 'w', encoding='utf-8') as file:
        json.dump(data, file, ensure_ascii=False, indent=4)

# –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —É —Ñ–∞–π–ª—ñ
def update_data():
    data_to_save = {
        "tasks": tasks,
        "user_data": user_data
    }
    save_data(data_to_save)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
data = load_data()
tasks = data.get("tasks", {})
user_data = data.get("user_data", {})

# –°—Ç–∞–Ω–∏ –±–æ—Ç–∞
STATE_SELECT_USER = 1
STATE_ENTER_TASK = 2
STATE_SELECT_PRIORITY = 3
STATE_CANNOT_COMPLETE = 4

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—ñ–≤
priority_translation = {
    'urgent': '–¢–µ—Ä–º—ñ–Ω–æ–≤–æ',
    'medium': '–°–µ—Ä–µ–¥–Ω—ñ–π',
    'low': '–ù–∏–∑—å–∫–∏–π'
}

# –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
def main_menu_keyboard():
    return ReplyKeyboardMarkup([
        ['üìù –î–æ–¥–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è', '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è'],
        ['üìã –ú–æ—ó –∑–∞–≤–¥–∞–Ω–Ω—è', 'üö´ –ù–µ –º–æ–∂—É –≤–∏–∫–æ–Ω–∞—Ç–∏']
    ], resize_keyboard=True)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat.type != "private":
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –º–µ–Ω—ñ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —â–æ–± –¥–æ–¥–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è.")
        return

    user = update.effective_user

    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ user_data, —è–∫—â–æ –π–æ–≥–æ —Ç–∞–º –Ω–µ–º–∞—î
    if user.id not in user_data:
        user_data[user.id] = {
            'username': user.username if user.username else f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user.id}",
            'chat_id': user.id
        }
        update_data()  # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —É —Ñ–∞–π–ª—ñ

    await update.message.reply_text(
        "–í—ñ—Ç–∞—é! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
        reply_markup=main_menu_keyboard()
    )

# –ö–æ–º–∞–Ω–¥–∞ /tasks
async def show_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat.type != "private":
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –º–µ–Ω—ñ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è.")
        return

    user_id = update.effective_user.id
    if user_id not in tasks or not tasks[user_id]:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å.")
        return

    tasks_list = []
    for task in tasks[user_id]:
        tasks_list.append(f"üìù {task['task_text']} ({priority_translation[task['priority']]})\n   üë§ –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–æ: {task['assigned_by']}")
    await update.message.reply_text("–í–∞—à—ñ –∞–∫—Ç–∏–≤–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è:\n\n" + "\n".join(tasks_list))

# –ö–æ–º–∞–Ω–¥–∞ /completetask
async def complete_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat.type != "private":
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –º–µ–Ω—ñ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —â–æ–± –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è.")
        return

    user_id = update.effective_user.id
    if user_id not in tasks or not tasks[user_id]:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å.")
        return

    keyboard = []
    for index, task in enumerate(tasks[user_id]):
        keyboard.append([InlineKeyboardButton(f"{task['task_text']} ({priority_translation[task['priority']]})", callback_data=f"complete_{index}")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è:", reply_markup=reply_markup)

# –ö–æ–º–∞–Ω–¥–∞ "–ù–µ –º–æ–∂—É –≤–∏–∫–æ–Ω–∞—Ç–∏"
async def cannot_complete_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat.type != "private":
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –º–µ–Ω—ñ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —â–æ–± –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —Ü—é –∫–æ–º–∞–Ω–¥—É.")
        return

    user_id = update.effective_user.id
    if user_id not in tasks or not tasks[user_id]:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å.")
        return

    keyboard = []
    for index, task in enumerate(tasks[user_id]):
        keyboard.append([InlineKeyboardButton(f"{task['task_text']} ({priority_translation[task['priority']]})", callback_data=f"cannot_complete_{index}")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –∑–∞–≤–¥–∞–Ω–Ω—è, —è–∫–µ –≤–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ–Ω–∞—Ç–∏:", reply_markup=reply_markup)

# –û–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (–¥–ª—è –∫–Ω–æ–ø–æ–∫ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é)
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat.type != "private":
        return

    text = update.message.text
    if text == 'üìù –î–æ–¥–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è':
        await add_task(update, context)
    elif text == '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è':
        await complete_task(update, context)
    elif text == 'üìã –ú–æ—ó –∑–∞–≤–¥–∞–Ω–Ω—è':
        await show_tasks(update, context)
    elif text == 'üö´ –ù–µ –º–æ–∂—É –≤–∏–∫–æ–Ω–∞—Ç–∏':
        await cannot_complete_task(update, context)
    else:
        user_state = context.user_data.get('state')
        if user_state == STATE_ENTER_TASK:
            task_text = update.message.text
            context.user_data['task_text'] = task_text
            keyboard = [
                [InlineKeyboardButton("–¢–µ—Ä–º—ñ–Ω–æ–≤–æ", callback_data='urgent')],
                [InlineKeyboardButton("–°–µ—Ä–µ–¥–Ω—ñ–π", callback_data='medium')],
                [InlineKeyboardButton("–ù–∏–∑—å–∫–∏–π", callback_data='low')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç –∑–∞–≤–¥–∞–Ω–Ω—è:", reply_markup=reply_markup)
            context.user_data['state'] = STATE_SELECT_PRIORITY
        elif user_state == STATE_CANNOT_COMPLETE:
            reason = update.message.text
            task_index = context.user_data.get('cannot_complete_task_index')
            if task_index is not None:
                user_id = update.effective_user.id
                if user_id in tasks and 0 <= task_index < len(tasks[user_id]):
                    del tasks[user_id][task_index]
                    update_data()
                    await update.message.reply_text("–ó–∞–≤–¥–∞–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –Ω–µ–º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è.")
                    context.user_data['state'] = None

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–æ–∫
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data.startswith("complete_"):
        task_index = int(query.data.split("_")[1])
        user_id = query.from_user.id
        if user_id in tasks and 0 <= task_index < len(tasks[user_id]):
            del tasks[user_id][task_index]
            update_data()
            await query.edit_message_text(text="–ó–∞–≤–¥–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    elif query.data.startswith("cannot_complete_"):
        task_index = int(query.data.split("_")[1])
        user_id = query.from_user.id
        if user_id in tasks and 0 <= task_index < len(tasks[user_id]):
            del tasks[user_id][task_index]
            update_data()
            await query.edit_message_text(text="–ó–∞–≤–¥–∞–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –Ω–µ–º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è.")
    elif query.data in ['urgent', 'medium', 'low']:
        user_id = query.from_user.id
        task_text = context.user_data.get('task_text')
        assigned_by = user_data[user_id]['username']
        priority = query.data
        if user_id not in tasks:
            tasks[user_id] = []
        tasks[user_id].append({
            'task_text': task_text,
            'priority': priority,
            'assigned_by': assigned_by
        })
        update_data()
        await query.edit_message_text(text=f"–ó–∞–≤–¥–∞–Ω–Ω—è –¥–æ–¥–∞–Ω–æ –∑ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–æ–º: {priority_translation[priority]}")

# –§—É–Ω–∫—Ü—ñ—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
async def remind_task(context: ContextTypes.DEFAULT_TYPE):
    now = datetime.now().time()
    start_time = time(7, 0, 0)
    end_time = time(19, 59, 59)

    if start_time <= now <= end_time:
        for user_id, user_tasks in tasks.items():
            for task in user_tasks:
                priority = task['priority']
                if priority == 'urgent' and now.minute % 60 == 0:  # –ö–æ–∂–Ω—ñ 1 –≥–æ–¥–∏–Ω—É
                    await context.bot.send_message(
                        chat_id=user_id,
                        text=f"‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: {task['task_text']} ({priority_translation[priority]})"
                    )
                elif priority == 'medium' and now.hour % 6 == 0:  # –ö–æ–∂–Ω—ñ 6 –≥–æ–¥–∏–Ω
                    await context.bot.send_message(
                        chat_id=user_id,
                        text=f"‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: {task['task_text']} ({priority_translation[priority]})"
                    )
                elif priority == 'low' and now.hour == 7 and now.minute == 0:  # –©–æ–¥–Ω—è –æ 7:00
                    await context.bot.send_message(
                        chat_id=user_id,
                        text=f"‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: {task['task_text']} ({priority_translation[priority]})"
                    )

# –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.error("Exception while handling an update:", exc_info=context.error)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
def initialize_bot():
    global application
    TOKEN = "7911352883:AAHiZP7RuhiwCz_ItdMakiQqo23WVxAV_Zw"
    application = (
        ApplicationBuilder()
        .token(TOKEN)
        .read_timeout(30)
        .write_timeout(30)
        .post_init(lambda app: app.job_queue.start())
        .build()
    )

    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(button))

    # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è JobQueue
    if application.job_queue:
        application.job_queue.run_repeating(callback=remind_task, interval=3600, first=0)

    # –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫
    application.add_error_handler(error_handler)

    # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞
    application.run_webhook(
        listen='0.0.0.0',
        port=int(os.environ.get('PORT', 5000)),
        url_path=TOKEN,
        webhook_url=f'https://reminder-bot-m6pm.onrender.com/{TOKEN}'
    )

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –¥–æ–¥–∞—Ç–∫—É
initialize_bot()

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 5000)))