import logging
import os
from datetime import time
from flask import Flask, request
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Flask –¥–æ–¥–∞—Ç–∫—É
app = Flask(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è Application
application = None

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å
tasks = {}

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
user_data = {}

# –°—Ç–∞–Ω–∏ –±–æ—Ç–∞
STATE_SELECT_USER = 1
STATE_ENTER_TASK = 2
STATE_SELECT_PRIORITY = 3
STATE_CANNOT_COMPLETE = 4

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—ñ–≤
priority_translation = {
    'urgent': '–¢–µ—Ä–º—ñ–Ω–æ–≤–æ',
    'medium': '–°–µ—Ä–µ–¥–Ω—ñ–π',
    'low': '–ù–∏–∑—å–∫–∏–π'
}

# –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
def main_menu_keyboard():
    return ReplyKeyboardMarkup([
        ['üìù –î–æ–¥–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è', '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è'],
        ['üìã –ú–æ—ó –∑–∞–≤–¥–∞–Ω–Ω—è', 'üö´ –ù–µ –º–æ–∂—É –≤–∏–∫–æ–Ω–∞—Ç–∏']
    ], resize_keyboard=True)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat.type != "private":
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –º–µ–Ω—ñ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —â–æ–± –¥–æ–¥–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è.")
        return

    user = update.effective_user
    user_data[user.id] = {
        'username': user.username,
        'chat_id': user.id
    }

    await update.message.reply_text(
        "–í—ñ—Ç–∞—é! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
        reply_markup=main_menu_keyboard()
    )

# –ö–æ–º–∞–Ω–¥–∞ /tasks
async def show_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat.type != "private":
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –º–µ–Ω—ñ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è.")
        return

    user_id = update.effective_user.id

    if user_id not in tasks or not tasks[user_id]:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å.")
        return

    tasks_list = []
    for task in tasks[user_id]:
        tasks_list.append(f"üìù {task['task_text']} ({priority_translation[task['priority']]})\n   üë§ –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–æ: {task['assigned_by']}")

    await update.message.reply_text("–í–∞—à—ñ –∞–∫—Ç–∏–≤–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è:\n\n" + "\n".join(tasks_list))

# –ö–æ–º–∞–Ω–¥–∞ /completetask
async def complete_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat.type != "private":
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –º–µ–Ω—ñ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —â–æ–± –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è.")
        return

    user_id = update.effective_user.id

    if user_id not in tasks or not tasks[user_id]:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å.")
        return

    keyboard = []
    for index, task in enumerate(tasks[user_id]):
        keyboard.append([InlineKeyboardButton(f"{task['task_text']} ({priority_translation[task['priority']]})", callback_data=f"complete_{index}")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è:", reply_markup=reply_markup)

# –ö–æ–º–∞–Ω–¥–∞ "–ù–µ –º–æ–∂—É –≤–∏–∫–æ–Ω–∞—Ç–∏"
async def cannot_complete_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat.type != "private":
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –º–µ–Ω—ñ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —â–æ–± –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —Ü—é –∫–æ–º–∞–Ω–¥—É.")
        return

    user_id = update.effective_user.id

    if user_id not in tasks or not tasks[user_id]:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å.")
        return

    keyboard = []
    for index, task in enumerate(tasks[user_id]):
        keyboard.append([InlineKeyboardButton(f"{task['task_text']} ({priority_translation[task['priority']]})", callback_data=f"cannot_complete_{index}")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –∑–∞–≤–¥–∞–Ω–Ω—è, —è–∫–µ –≤–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ–Ω–∞—Ç–∏:", reply_markup=reply_markup)

# –û–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (–¥–ª—è –∫–Ω–æ–ø–æ–∫ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é)
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat.type != "private":
        return

    text = update.message.text

    if text == 'üìù –î–æ–¥–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è':
        await add_task(update, context)
    elif text == '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è':
        await complete_task(update, context)
    elif text == 'üìã –ú–æ—ó –∑–∞–≤–¥–∞–Ω–Ω—è':
        await show_tasks(update, context)
    elif text == 'üö´ –ù–µ –º–æ–∂—É –≤–∏–∫–æ–Ω–∞—Ç–∏':
        await cannot_complete_task(update, context)
    else:
        user_state = context.user_data.get('state')

        if user_state == STATE_ENTER_TASK:
            task_text = update.message.text
            context.user_data['task_text'] = task_text

            keyboard = [
                [InlineKeyboardButton("–¢–µ—Ä–º—ñ–Ω–æ–≤–æ", callback_data='urgent')],
                [InlineKeyboardButton("–°–µ—Ä–µ–¥–Ω—ñ–π", callback_data='medium')],
                [InlineKeyboardButton("–ù–∏–∑—å–∫–∏–π", callback_data='low')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç –∑–∞–≤–¥–∞–Ω–Ω—è:", reply_markup=reply_markup)
            context.user_data['state'] = STATE_SELECT_PRIORITY

        elif user_state == STATE_CANNOT_COMPLETE:
            reason = update.message.text
            task_index = context.user_data.get('cannot_complete_task_index')

            if task_index is not None:
                user_id = update.effective_user.id
                if user_id in tasks and 0 <= task_index < len(tasks[user_id]):
                    task = tasks[user_id][task_index]
                    assigned_by_id = task['assigned_by_id']

                    try:
                        await context.bot.send_message(
                            chat_id=assigned_by_id,
                            text=f"üö´ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á @{update.effective_user.username if update.effective_user.username else update.effective_user.id} –Ω–µ –º–æ–∂–µ –≤–∏–∫–æ–Ω–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è:\n\n"
                                 f"üìù –ó–∞–≤–¥–∞–Ω–Ω—è: {task['task_text']}\n"
                                 f"üö¶ –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: {priority_translation[task['priority']]}\n"
                                 f"üìå –ü—Ä–∏—á–∏–Ω–∞: {reason}"
                        )
                    except Exception as e:
                        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {assigned_by_id}: {e}")

                    tasks[user_id].pop(task_index)
                    await update.message.reply_text("–ó–∞–≤–¥–∞–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –Ω–µ–º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è.")
                else:
                    await update.message.reply_text("–ü–æ–º–∏–ª–∫–∞: –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            else:
                await update.message.reply_text("–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è.")

            context.user_data.clear()

# –ö–æ–º–∞–Ω–¥–∞ /addtask
async def add_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat.type != "private":
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –º–µ–Ω—ñ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —â–æ–± –¥–æ–¥–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è.")
        return

    keyboard = [
        [InlineKeyboardButton("–°–æ–±—ñ", callback_data=f"assign_{update.effective_user.id}")]
    ]

    for user_id, data in user_data.items():
        if user_id != update.effective_user.id:
            username = data['username'] if data['username'] else f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id}"
            keyboard.append([InlineKeyboardButton(username, callback_data=f"assign_{user_id}")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–º—É —Ö–æ—á–µ—Ç–µ –ø—Ä–∏–∑–Ω–∞—á–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è:", reply_markup=reply_markup)
    context.user_data['state'] = STATE_SELECT_USER

# –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É –∞–±–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data.startswith("assign_"):
        assigned_user_id = int(query.data.split("_")[1])
        context.user_data['assigned_user'] = assigned_user_id
        await query.edit_message_text(text="–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –∑–∞–≤–¥–∞–Ω–Ω—è:")
        context.user_data['state'] = STATE_ENTER_TASK

    elif query.data.startswith("complete_"):
        index = int(query.data.split("_")[1])
        user_id = query.from_user.id

        if user_id in tasks and 0 <= index < len(tasks[user_id]):
            completed_task = tasks[user_id].pop(index)
            await query.edit_message_text(text=f"–ó–∞–≤–¥–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {completed_task['task_text']} ({priority_translation[completed_task['priority']]})")

            assigned_by_id = completed_task['assigned_by_id']
            if assigned_by_id in user_data:
                assigned_by_username = user_data[assigned_by_id]['username']
                try:
                    await context.bot.send_message(
                        chat_id=assigned_by_id,
                        text=f"‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è, —è–∫–µ –≤–∏ –ø—Ä–∏–∑–Ω–∞—á–∏–ª–∏ –¥–ª—è @{query.from_user.username if query.from_user.username else query.from_user.id}, –≤–∏–∫–æ–Ω–∞–Ω–æ:\n\n"
                             f"üìù –ó–∞–≤–¥–∞–Ω–Ω—è: {completed_task['task_text']}\n"
                             f"üö¶ –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: {priority_translation[completed_task['priority']]}"
                    )
                except Exception as e:
                    logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {assigned_by_id}: {e}")
        else:
            await query.edit_message_text(text="–ü–æ–º–∏–ª–∫–∞: –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

    elif query.data.startswith("cannot_complete_"):
        index = int(query.data.split("_")[2])
        user_id = query.from_user.id

        if user_id in tasks and 0 <= index < len(tasks[user_id]):
            context.user_data['cannot_complete_task_index'] = index
            await query.edit_message_text(text="–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø—Ä–∏—á–∏–Ω—É, —á–æ–º—É –≤–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ–Ω–∞—Ç–∏ —Ü–µ –∑–∞–≤–¥–∞–Ω–Ω—è:")
            context.user_data['state'] = STATE_CANNOT_COMPLETE
        else:
            await query.edit_message_text(text="–ü–æ–º–∏–ª–∫–∞: –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

    else:
        priority = query.data
        context.user_data['priority'] = priority

        assigned_user = context.user_data['assigned_user']
        task_text = context.user_data['task_text']

        if assigned_user not in tasks:
            tasks[assigned_user] = []

        tasks[assigned_user].append({
            'task_text': task_text,
            'priority': priority,
            'assigned_by': f"@{query.from_user.username}" if query.from_user.username else f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {query.from_user.id}",
            'assigned_by_id': query.from_user.id
        })

        try:
            await context.bot.send_message(
                chat_id=assigned_user,
                text=f"üéØ –í–∞–º –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ –Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è:\n\n"
                     f"üìù –ó–∞–≤–¥–∞–Ω–Ω—è: {task_text}\n"
                     f"üö¶ –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: {priority_translation[priority]}\n"
                     f"üë§ –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–æ: @{query.from_user.username if query.from_user.username else query.from_user.id}\n\n"
                     f"–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –±—É–¥—É—Ç—å –Ω–∞–¥—Ö–æ–¥–∏—Ç–∏ —É –ø—Ä–∏–≤–∞—Ç–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."
            )
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É: {e}")

        if priority == 'urgent':
            context.job_queue.run_repeating(remind_task, interval=3600, first=0, chat_id=assigned_user, data=assigned_user, name='urgent')
        elif priority == 'medium':
            context.job_queue.run_repeating(remind_task, interval=21600, first=0, chat_id=assigned_user, data=assigned_user, name='medium')
        elif priority == 'low':
            reminder_time = time(11, 0, 0)
            context.job_queue.run_daily(remind_task, time=reminder_time, chat_id=assigned_user, data=assigned_user, name='low')

        await query.edit_message_text(text=f"–ó–∞–≤–¥–∞–Ω–Ω—è –¥–æ–¥–∞–Ω–æ –¥–ª—è {user_data[assigned_user]['username']} –∑ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–æ–º {priority_translation[priority]}!")
        context.user_data.clear()

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
async def remind_task(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    assigned_user = job.data
    priority = job.name

    if assigned_user in tasks and tasks[assigned_user]:
        for task in tasks[assigned_user]:
            if task['priority'] == priority:
                await context.bot.send_message(
                    chat_id=context.job.chat_id,
                    text=f"‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –¥–ª—è {user_data[assigned_user]['username']}:\n\n"
                         f"üìù –ó–∞–≤–¥–∞–Ω–Ω—è: {task['task_text']}\n"
                         f"üö¶ –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: {priority_translation[task['priority']]}\n"
                         f"üë§ –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–æ: {task['assigned_by']}"
                )

# –ï–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –≤–µ–±—Ö—É–∫—ñ–≤
@app.route('/webhook', methods=['POST'])
def webhook():
    update = Update.de_json(request.get_json(force=True), application.bot)
    application.update_queue.put(update)
    return 'ok'

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.error("Exception while handling an update:", exc_info=context.error)

def initialize_bot():
    global application
    TOKEN = "8197063148:AAHu3grk5UOnUqqjuTBmqAPvy-7TYfId4qk"
    application = ApplicationBuilder().token(TOKEN).read_timeout(30).write_timeout(30).build()

    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(button))

    # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è JobQueue
    application.job_queue.run_repeating(callback=remind_task, interval=3600, first=0)

    # –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫
    application.add_error_handler(error_handler)

    # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞
    application.run_webhook(
        listen='0.0.0.0',
        port=int(os.environ.get('PORT', 5000)),
        url_path=TOKEN,
        webhook_url=f'https://reminder-bot-1tlk.onrender.com/{TOKEN}'
    )

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –¥–æ–¥–∞—Ç–∫—É
initialize_bot()

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 5000)))